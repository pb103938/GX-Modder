@app.route('/', methods=['GET', 'POST'])
def upload_file():
  
    if request.method == 'POST':
          print("form:", request.form)
          print("files:", request.files)
          # Get the uploaded files and save them to the local file system
          filenames = []
          for i in range(1, 29):
              file = request.files.get(f'file{i}')
              nameFiles = ["backspace.wav", "enter.wav", "letter_1.wav", "letter_2.wav", "letter_3.wav", "space.wav", "track_1.mp3", "track_2.mp3", "track_3.mp3", "track_4.mp3", "click.mp3", "close_tab.mp3", "feature_switch_off.mp3", "feature_switch_on.mp3", "hover.mp3", "important_click.mp3", "level_upgrade.mp3", "limiter_off.mp3", "limiter_on.mp3", "new_tab.mp3", "switch.mp3", "tab_slash.mp3", "dark.png", "light.png", "dark_video.webm", "light_video.webm", "icon_512.png", "license.txt"]
              filename = secure_filename(nameFiles[i - 1])
              if file:
                  if i <= 6:
                      file_folder = 'keyboard'
                  elif i <= 10:
                      file_folder = 'music'
                  elif i <= 22:
                      file_folder = 'sound'
                  elif i <= 26:
                      file_folder = 'wallpaper'
                  else:
                      file_folder = ''
                  file_path = os.path.join(TEST_FOLDER, file_folder, filename)
                  file.save(file_path)
                  filenames.append(file_path)
              if not file:
                  if filename.endswith('.wav'):
                    file_folder = 'keyboard'
                  elif filename.endswith('.mp3'):
                    traks=["track_1.mp3", "track_2.mp3", "track_3.mp3", "track_4.mp3"]
                    if any(name in filename for name in traks):
                      file_folder = 'music'
                    else:
                      file_folder = 'sound'
                  elif filename.endswith('.png') or filename.endswith('.webm'):
                    walls=["dark.png", "light.png", "dark_video.webm", "light_video.webm"]
                    if any(name in filename for name in walls):
                      file_folder = 'wallpaper'
                    else:
                      file_folder = ''
                  elif filename.endswith('.txt'):
                    file_folder = ''
                  with open(f"{TEST_FOLDER}/{file_folder}/{nameFiles[i - 1]}", "w") as nFile:
                      print(nFile)
                      filename = secure_filename(nFile.name)
                      filenames.append(nFile.name)
                      nFile.close()
      
          with open(f"mods/{downLink}/manifest.json", "w") as m:
            m.write(str({"name": str(request.form.get('mod name')),
      "description": str(request.form.get('mod description')),
      "developer":
      {
          "name": str(request.form.get('mod author'))
      },
      "icons":
      {
          "512": "icon_512.png"
      },
      "manifest_version": 3,
      "mod":
      {
          "license": "license.txt",
          "payload":
          {
              "background_music":
              [
                  "music/track_1.mp3",
                  "music/track_2.mp3",
                  "music/track_3.mp3",
                  "music/track_4.mp3"
              ],
              "browser_sounds":
              {
                  "CLICK":
                  [
                      "sound/click.mp3"
                  ],
                  "FEATURE_SWITCH_OFF":
                  [
                      "sound/feature_switch_off.mp3"
                  ],
                  "FEATURE_SWITCH_ON":
                  [
                      "sound/feature_switch_on.mp3"
                  ],
                  "HOVER":
                  [
                      "sound/hover.mp3"
                  ],
                  "HOVER_UP":
                  [
                      "sound/hover.mp3"
                  ],
                  "IMPORTANT_CLICK":
                  [
                      "sound/important_click.mp3"
                  ],
                  "LEVEL_UPGRADE":
                  [
                      "sound/level_upgrade.mp3"
                  ],
                  "LIMITER_OFF":
                  [
                      "sound/limiter_off.mp3"
                  ],
                  "LIMITER_ON":
                  [
                      "sound/limiter_on.mp3"
                  ],
                  "SWITCH_TOGGLE":
                  [
                      "sound/switch.mp3"
                  ],
                  "TAB_CLOSE":
                  [
                      "sound/close_tab.mp3"
                  ],
                  "TAB_INSERT":
                  [
                      "sound/new_tab.mp3"
                  ],
                  "TAB_SLASH":
                  [
                      "sound/tab_slash.mp3"
                  ]
              },
              "keyboard_sounds":
              {
                  "TYPING_BACKSPACE":
                  [
                      "keyboard/backspace.wav"
                  ],
                  "TYPING_ENTER":
                  [
                      "keyboard/enter.wav"
                  ],
                  "TYPING_LETTER":
                  [
                      "keyboard/letter_1.wav",
                      "keyboard/letter_2.wav",
                      "keyboard/letter_3.wav"
                  ],
                  "TYPING_SPACE":
                  [
                      "keyboard/space.wav"
                  ]
              },
              "theme":
              {
                  "dark":
                  {
                      "gx_accent":
                      {
                          "h": int(request.form.get('dph')),
                          "s": int(request.form.get('dps')),
                          "l": int(request.form.get('dpl'))
                      },
                      "gx_secondary_base":
                      {
                          "h": int(request.form.get('dah')),
                          "s": int(request.form.get('das')),
                          "l": int(request.form.get('dal'))
                      }
                  },
                  "light":
                  {
                      "gx_accent":
                      {
                          "h": int(request.form.get('lph')),
                          "s": int(request.form.get('lps')),
                          "l": int(request.form.get('lpl'))
                      },
                      "gx_secondary_base":
                      {
                          "h": int(request.form.get('lah')),
                          "s": int(request.form.get('las')),
                          "l": int(request.form.get('lal'))
                      }
                  }
              },
              "wallpaper":
              {
                  "dark":
                  {   
                      "image": "wallpaper/dark.png",
                      "first_frame": "wallpaper/dark_video.webm",
                      "text_color": "#FFFFFF",
                      "text_shadow": "#757575"
                  },
                  "light":
                  {
                      "image": "wallpaper/light_video.webm",
                      "first_frame": "wallpaper/light.png",
                      "text_color": "#FFFFFF",
                      "text_shadow": "#0B000E"
                  }
              }
          },
          "schema_version": 1
      },
      "version": str(request.form.get('mod version'))
  }).replace(chr(39), chr(34)))
            filenames.append(m.name)
          m.close()

          if 'testButton' in request.form:
            if not os.path.exists(f"templates/{downLink}-test"):
              exdown = open("templates/exampleTest.html", "r")
              with open(f"templates/{downLink}-test.html", "w") as downpage:
                downpage.write(str(exdown.read()))
                exdown.close()
                downpage.close()
              return redirect(f"{mURL}/test-mod/{downLink}")
            else:
              return redirect(f"{mURL}/test-mod/{downLink}")
  
          # Create a zip file containing the uploaded files
          if filenames:
              global mName
              mName = str(request.form.get('mod name'))
              zip_filename = f'{mName.replace(" ", "-")}-mod.zip'
              with zipfile.ZipFile(zip_filename, 'w') as zip_file:
                  for filename in filenames:
                      if filename.endswith('.wav'):
                          file_folder = 'keyboard'
                      elif filename.endswith('.mp3'):
                        traks=["track_1.mp3", "track_2.mp3", "track_3.mp3", "track_4.mp3"]
                        if any(name in filename for name in traks):
                          file_folder = 'music'
                        else:
                          file_folder = 'sound'
                      elif filename.endswith('.png') or filename.endswith('.webm'):
                        walls=["dark.png", "light.png", "dark_video.webm", "light_video.webm"]
                        if any(name in filename for name in walls):
                          file_folder = 'wallpaper'
                        else:
                          file_folder = ''
                      elif filename.endswith('.txt'):
                        file_folder = ''
                      else:
                          file_folder = os.path.basename(os.path.dirname(filename))
                      zip_file.write(filename, os.path.join(file_folder, os.path.basename(filename)))
                      
                      os.remove(filename)
            
          if not os.path.exists(f"templates/{downLink}"):
            exdown = open("templates/exampleDownload.html", "r")
            with open(f"templates/{downLink}.html", "w") as downpage:
              downpage.write(str(exdown.read()))
              exdown.close()
              downpage.close()
            return redirect(f"{mURL}/download-mod/{downLink}")
          else:
            return redirect(f"{mURL}/download-mod/{downLink}")
  
    else:
      return render_template('index.html')









<!doctype html>
<html>
  <head>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7224168871546775"
     crossorigin="anonymous"></script>
    <link rel="icon" href="static/icon.png" type="image/png">
    <title>Opera GX Modder</title>
    <meta name="description" content="Make Opera GX mods with ease!">
    <link rel="stylesheet" href="static/style.css">
    <meta property="og:title" content="Opera GX Modder">
    <meta property="og:description" content="Make Opera GX mods with ease!">
    <meta property="og:image" content="/static/embed/Website Banner.png">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://opera.makeamod.com">
    <script>
      window.addEventListener("DOMContentLoaded", function() {
        let lph = document.getElementById("lph");
        if (lph.value === '') {
          lph.value = 352; // Set the default value to 5
        }
        let lps = document.getElementById("lps");
        if (lps.value === '') {
          lps.value = 90; // Set the default value to 5
        }
        let lpl = document.getElementById("lpl");
        if (lpl.value === '') {
          lpl.value = 54; // Set the default value to 5
        }
        let lah = document.getElementById("lah");
        if (lah.value === '') {
          lah.value = 254; // Set the default value to 5
        }
        let las = document.getElementById("las");
        if (las.value === '') {
          las.value = 35; // Set the default value to 5
        }
        let lal = document.getElementById("lal");
        if (lal.value === '') {
          lal.value = 12; // Set the default value to 5
        }
        let dph = document.getElementById("dph");
        if (dph.value === '') {
          dph.value = 352; // Set the default value to 5
        }
        let dps = document.getElementById("dps");
        if (dps.value === '') {
          dps.value = 90; // Set the default value to 5
        }
        let dpl = document.getElementById("dpl");
        if (dpl.value === '') {
          dpl.value = 54; // Set the default value to 5
        }
        let dah = document.getElementById("dah");
        if (dah.value === '') {
          dah.value = 254; // Set the default value to 5
        }
        let das = document.getElementById("das");
        if (das.value === '') {
          das.value = 35; // Set the default value to 5
        }
        let dal = document.getElementById("dal");
        if (dal.value === '') {
          dal.value = 12; // Set the default value to 5
        }
      });
    </script>
</head>
  <body>
    <script>
    function headers() {
    fetch('/static/header-footer.html') // Replace 'path/to/other/file.html' with the actual path to your other HTML file.
      .then(response => response.text())
      .then(html => {
        // Create a temporary container element to hold the fetched content.
        const tempContainer = document.createElement('div');
        tempContainer.innerHTML = html;
  
        // Find the element you want to clone inside the temporary container.
        const sourceElement = tempContainer.querySelector('#header');
  
        if (sourceElement) {
          // Clone the element and its children.
          const clonedElement = sourceElement.cloneNode(true);
  
          // Insert the cloned element into the destination element.
          const destinationElement = document.getElementById('pageHeader');
          destinationElement.appendChild(clonedElement);
        }
      })
      .catch(error => {
        console.error('Error fetching the file:', error);
      });
    };
    
    function footers() {
    fetch('/static/header-footer.html') // Replace 'path/to/other/file.html' with the actual path to your other HTML file.
      .then(response => response.text())
      .then(html => {
        // Create a temporary container element to hold the fetched content.
        const tempContainer = document.createElement('div');
        tempContainer.innerHTML = html;
  
        // Find the element you want to clone inside the temporary container.
        const sourceElement = tempContainer.querySelector('#footer');
  
        if (sourceElement) {
          // Clone the element and its children.
          const clonedElement = sourceElement.cloneNode(true);
  
          // Insert the cloned element into the destination element.
          const destinationElement = document.getElementById('pageFooter');
          destinationElement.appendChild(clonedElement);
        }
      })
      .catch(error => {
        console.error('Error fetching the file:', error);
      });
    };

    headers();
    footers();
    
    </script>
    <div id="pageHeader"></div>
    <br><br><br><br>
    <p class="text__main-desc">Please select 28 files. These files will be used to create a mod for Opera GX. Files do not need to have certain names but MUST be the same file type as the example name listed above each '<b>Choose File</b>' button. If you don't want to upload a file for a certain part, leave it blank. Please note that there is currently no support for shaders or webmodding:</p>
    <br>
    <div class="container">
      <div class="left-contentr">
        <form method="POST" enctype="multipart/form-data">
      <p class="text__main-input-types">Keyboard Sounds:
      <br><br>
      <p class="text__main-input-names">backspace.wav
      <br>
      <input type="file" name="file1" accept="audio/wav, audio/wave">
      <br>
      <p class="text__main-input-names">enter.wav
      <br>
      <input type="file" name="file2" accept="audio/wav, audio/wave">
      <br>
      <p class="text__main-input-names">letter_1.wav
      <br>
      <input type="file" name="file3" accept="audio/wav, audio/wave">
      <br>
      <p class="text__main-input-names">letter_2.wav
      <br>
      <input type="file" name="file4" accept="audio/wav, audio/wave">
      <br>
      <p class="text__main-input-names">letter_3.wav
      <br>
      <input type="file" name="file5" accept="audio/wav, audio/wave">
      <br>
      <p class="text__main-input-names">space.wav
      <br>
      <input type="file" name="file6" accept="audio/wav, audio/wave">
      <br><br><br>
      <p class="text__main-input-types">Background Music:
      <br><br>
      <p class="text__main-input-names">track_1.mp3:
      <br>
      <input type="file" name="file7" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">track_2.mp3:
      <br>
      <input type="file" name="file8" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">track_3.mp3:
      <br>
      <input type="file" name="file9" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">track_4.mp3:
      <br>
      <input type="file" name="file10" accept="audio/mp3">
      <br><br><br>
      <p class="text__main-input-types">Browser Sounds:
      <br><br>
      <p class="text__main-input-names">click.mp3
      <br>
      <input type="file" name="file11" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">close_tab.mp3
      <br>
      <input type="file" name="file12" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">feature_switch_off.mp3
      <br>
      <input type="file" name="file13" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">feature_switch_on.mp3
      <br>
      <input type="file" name="file14" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">hover.mp3
      <br>
      <input type="file" name="file15" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">important_click.mp3
      <br>
      <input type="file" name="file16" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">level_upgrade.mp3
      <br>
      <input type="file" name="file17" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">limiter_off.mp3
      <br>
      <input type="file" name="file18" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">limiter_on.mp3
      <br>
      <input type="file" name="file19" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">new_tab.mp3
      <br>
      <input type="file" name="file20" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">switch.mp3
      <br>
      <input type="file" name="file21" accept="audio/mp3">
      <br>
      <p class="text__main-input-names">tab_slash.mp3
      <br>
      <input type="file" name="file22" accept="audio/mp3">
      <br><br><br>
      <p class="text__main-input-types">Wallpapers:
      <br><br>
      <p class="text__main-input-names">light.png
      <br>
      <input type="file" name="file23" accept="image/png">
      <br>
      <p class="text__main-input-names">light_video.webm
      <br>
      <input type="file" name="file24" accept="video/webm">
      <br>
      <p class="text__main-input-names">dark.png
      <br>
      <input type="file" name="file25" accept="image/png">
      <br>
      <p class="text__main-input-names">dark_video.webm
      <br>
      <input type="file" name="file26" accept="video/webm">
      <br><br><br>
      <p class="text__main-input-types">Mod Info: <n style="color: red">(REQUIRED)
      <br><br>
      <p class="text__main-input-names">icon_512.png
      <br>
      <input type="file" name="file27" accept="image/png">
      <br>
      <p class="text__main-input-names">license.txt
      <br>
      <input type="file" name="file28" accept="text/plain">
      <br>
      <p class="text__main-input-names">Mod Name:
      <br>
      <input class="input__main-mod-info" type="text" name="mod name" placeholder="ex. My cool Opera GX mod">
      <br>
      <p class="text__main-input-names">Mod Author:
      <br>
      <input class="input__main-mod-info" type="text" name="mod author" placeholder="ex. A Real Cool Coder">
      <br>
      <p class="text__main-input-names">Mod Description:
      <br>
      <textarea class="input__main-mod-desc" rows="10" cols="50" name="mod description" placeholder="ex. A cool mod which makes Opera GX cooler."></textarea>
      <br>
      <p class="text__main-input-names">Mod Version:
      <br>
      <input class="input__main-mod-info" type="number" name="mod version" min="0.00" max="999.99" placeholder="ex. 1.0">
      <br>
      <p class="text__main-input-names">Light Primary Color:
      <br>
      <p style="font-family: Arial">h: <input class="input__main-mod-info" style="width: 80px; margin-left: 1px;" type="number" name="lph" id="lph" min="0" max="999" placeholder="ex. 352">
      <br>
      <p style="font-family: Arial">s: <input class="input__main-mod-info" style="width: 80px; margin-left: 2px;" type="number" name="lps" id="lps" min="0" max="100" placeholder="ex. 90">
      <br>
      <p style="font-family: Arial">l: <input class="input__main-mod-info" style="width: 80px; margin-left: 7px;" type="number" name="lpl" id="lpl" min="0" max="100" placeholder="ex. 54">
      <br>
      <p class="text__main-input-names">Light Accent Color:
      <br>
      <p style="font-family: Arial">h: <input class="input__main-mod-info" style="width: 80px; margin-left: 1px;" type="number" name="lah" id="lah" min="0" max="999" placeholder="ex. 254">
      <br>
      <p style="font-family: Arial">s: <input class="input__main-mod-info" style="width: 80px; margin-left: 2px;" type="number" name="las" id="las" min="0" max="100" placeholder="ex. 35">
      <br>
      <p style="font-family: Arial">l: <input class="input__main-mod-info" style="width: 80px; margin-left: 7px;" type="number" name="lal" id="lal" min="0" max="100" placeholder="ex. 12">
      <br>
      <p class="text__main-input-names">Dark Primary Color:
      <br>
      <p style="font-family: Arial">h: <input class="input__main-mod-info" style="width: 80px; margin-left: 1px;" type="number" name="dph" id="dph" min="0" max="999" placeholder="ex. 352">
      <br>
      <p style="font-family: Arial">s: <input class="input__main-mod-info" style="width: 80px; margin-left: 2px;" type="number" name="dps" id="dps" min="0" max="100" placeholder="ex. 90">
      <br>
      <p style="font-family: Arial">l: <input class="input__main-mod-info" style="width: 80px; margin-left: 7px;" type="number" name="dpl" id="dpl" min="0" max="100" placeholder="ex. 54">
      <br>
      <p class="text__main-input-names">Dark Accent Color:
      <br>
      <p style="font-family: Arial">h: <input class="input__main-mod-info" style="width: 80px; margin-left: 1px;" type="number" name="dah" id="dah" min="0" max="999" placeholder="ex. 254">
      <br>
      <p style="font-family: Arial">s: <input class="input__main-mod-info" style="width: 80px; margin-left: 2px;" type="number" name="das" id="das" min="0" max="100" placeholder="ex. 35">
      <br>
      <p style="font-family: Arial">l: <input class="input__main-mod-info" style="width: 80px; margin-left: 7px;" type="number" name="dal" id="dal" min="0" max="100" placeholder="ex. 12">
      <br><br><br>
      <input class="downlink__button" style="margin-right: 20px;" type="submit" value="Download Mod" name="generateMod"> <button class="downlink__button" type="submit" value="Test Mod" name="testButton">Test Mod</button>
        <br><br><br><br><br><br>
    </form>        
      </div>
      <div class="right-container">
        <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7224168871546775"
     crossorigin="anonymous"></script>
<!-- topRight -->
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-7224168871546775"
     data-ad-slot="6743943760"
     data-ad-format="auto"
     data-full-width-responsive="true"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
      </div>
    </div>
    <br><br><br><br><br><br><br><br><br><br><br><br><br>
    <div id="pageFooter"></div>
  </body>
</html>